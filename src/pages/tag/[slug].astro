---
import type { MarkdownInstance } from "astro";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import BlogList from "../../components/BlogList.astro";
import { myName } from "../../data";
import { filterBlogNotComplete } from "../../data/utils";
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { AppIcon, Frontmatter } from "../../models";
dayjs.extend(localizedFormat);

interface StaticPath {
  params: { slug: string };
  props: { blogs: Frontmatter[]; tag: string };
}

interface BlogsWithTag {
  [key: string]: Frontmatter[];
}

export async function getStaticPaths(): Promise<Array<StaticPath>> {
  const glob = await Astro.glob<MarkdownInstance<Frontmatter>>(
    "../../blogs/*.{md,mdx}"
  );

  const blogsWithTag: BlogsWithTag = glob.reduce(
    (
      result: BlogsWithTag,
      blog: MarkdownInstance<Frontmatter>
    ): BlogsWithTag => {
      const blogData = blog.frontmatter;
      if (filterBlogNotComplete(blogData)) {
        blogData.tags.forEach((tag) => {
          if (result[tag]) {
            result[tag].push(blogData);
          } else {
            result[tag] = [blogData];
          }
        });
      }

      return result;
    },
    {}
  );

  const result: Array<StaticPath> = Object.keys(blogsWithTag).map((tag) => {
    return {
      params: { slug: tag.toLowerCase() },
      props: {
        tag: tag,
        blogs: blogsWithTag[tag],
      },
    };
  });

  return new Promise((resolver) => {
    resolver(result);
  });
}

const { blogs, tag } = Astro.props as StaticPath["props"];
const { slug } = Astro.params as StaticPath["params"];
const pageTitle = `${tag} | ${myName}`;
---

<BaseLayout pageTitle={pageTitle} activeRoute="blog">
  <header
    class="pb-5 flex justify-center px-10 py-5 border-b border-gray-700 dark:border-gray-300 mb-10"
  >
    <h1 class="tag-header text-5xl">
      {tag}
    </h1>
  </header>

  <section>
    <BlogList blogs={blogs} />
  </section>
</BaseLayout>

<style is:global>
  h1.tag-header {
    /* copy */
    --r: 0.5em; /* control the cutout of the ribbon */
    --c: #1470d8;

    padding-inline: calc(0.5em + var(--r));
    text-align: center;
    line-height: 2;
    color: #fff;
    background-image: linear-gradient(var(--c) 70%, #0000 0),
      linear-gradient(
        to bottom left,
        #0000 50%,
        color-mix(in srgb, var(--c), #000 40%) 51% 84%,
        #0000 85%
      );
    background-position: 0 0.15lh;
    background-size: 100% 1lh;
    clip-path: polygon(
      0 0.15lh,
      100% 0.15lh,
      calc(100% - var(--r)) 0.5lh,
      100% 0.85lh,
      100% calc(100% - 0.15lh),
      0 calc(100% - 0.15lh),
      var(--r) calc(100% - 0.5lh),
      0 calc(100% - 0.85lh)
    );
    /* width: fit-content; you may need this in your real use case */
    outline: none;
  }

  @supports not (height: 1lh) {
    h1.tag-header {
      background-position: 0 0.3em;
      background-size: 100% 2em;
      clip-path: polygon(
        0 0.3em,
        100% 0.3em,
        calc(100% - var(--r)) 1em,
        100% 1.7em,
        100% calc(100% - 0.3em),
        0 calc(100% - 0.3em),
        var(--r) calc(100% - 1em),
        0 calc(100% - 1.7em)
      );
    }
  }
</style>
